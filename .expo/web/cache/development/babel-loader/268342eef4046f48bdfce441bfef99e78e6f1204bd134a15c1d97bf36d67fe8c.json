{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nvar _excluded = [\"id\"],\n  _excluded2 = [\"id\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { PermissionStatus, createPermissionHook, UnavailabilityError } from 'expo-modules-core';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport processColor from \"react-native-web/dist/exports/processColor\";\nimport ExpoCalendar from \"./ExpoCalendar\";\nexport var DayOfTheWeek;\n(function (DayOfTheWeek) {\n  DayOfTheWeek[DayOfTheWeek[\"Sunday\"] = 1] = \"Sunday\";\n  DayOfTheWeek[DayOfTheWeek[\"Monday\"] = 2] = \"Monday\";\n  DayOfTheWeek[DayOfTheWeek[\"Tuesday\"] = 3] = \"Tuesday\";\n  DayOfTheWeek[DayOfTheWeek[\"Wednesday\"] = 4] = \"Wednesday\";\n  DayOfTheWeek[DayOfTheWeek[\"Thursday\"] = 5] = \"Thursday\";\n  DayOfTheWeek[DayOfTheWeek[\"Friday\"] = 6] = \"Friday\";\n  DayOfTheWeek[DayOfTheWeek[\"Saturday\"] = 7] = \"Saturday\";\n})(DayOfTheWeek || (DayOfTheWeek = {}));\nexport var MonthOfTheYear;\n(function (MonthOfTheYear) {\n  MonthOfTheYear[MonthOfTheYear[\"January\"] = 1] = \"January\";\n  MonthOfTheYear[MonthOfTheYear[\"February\"] = 2] = \"February\";\n  MonthOfTheYear[MonthOfTheYear[\"March\"] = 3] = \"March\";\n  MonthOfTheYear[MonthOfTheYear[\"April\"] = 4] = \"April\";\n  MonthOfTheYear[MonthOfTheYear[\"May\"] = 5] = \"May\";\n  MonthOfTheYear[MonthOfTheYear[\"June\"] = 6] = \"June\";\n  MonthOfTheYear[MonthOfTheYear[\"July\"] = 7] = \"July\";\n  MonthOfTheYear[MonthOfTheYear[\"August\"] = 8] = \"August\";\n  MonthOfTheYear[MonthOfTheYear[\"September\"] = 9] = \"September\";\n  MonthOfTheYear[MonthOfTheYear[\"October\"] = 10] = \"October\";\n  MonthOfTheYear[MonthOfTheYear[\"November\"] = 11] = \"November\";\n  MonthOfTheYear[MonthOfTheYear[\"December\"] = 12] = \"December\";\n})(MonthOfTheYear || (MonthOfTheYear = {}));\nexport { PermissionStatus };\nexport function isAvailableAsync() {\n  return _isAvailableAsync.apply(this, arguments);\n}\nfunction _isAvailableAsync() {\n  _isAvailableAsync = _asyncToGenerator(function* () {\n    return !!ExpoCalendar.getCalendarsAsync;\n  });\n  return _isAvailableAsync.apply(this, arguments);\n}\nexport function getCalendarsAsync(_x) {\n  return _getCalendarsAsync.apply(this, arguments);\n}\nfunction _getCalendarsAsync() {\n  _getCalendarsAsync = _asyncToGenerator(function* (entityType) {\n    if (!ExpoCalendar.getCalendarsAsync) {\n      throw new UnavailabilityError('Calendar', 'getCalendarsAsync');\n    }\n    if (!entityType) {\n      return ExpoCalendar.getCalendarsAsync(null);\n    }\n    return ExpoCalendar.getCalendarsAsync(entityType);\n  });\n  return _getCalendarsAsync.apply(this, arguments);\n}\nexport function createCalendarAsync() {\n  return _createCalendarAsync.apply(this, arguments);\n}\nfunction _createCalendarAsync() {\n  _createCalendarAsync = _asyncToGenerator(function* () {\n    var details = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!ExpoCalendar.saveCalendarAsync) {\n      throw new UnavailabilityError('Calendar', 'createCalendarAsync');\n    }\n    var color = details.color ? processColor(details.color) : undefined;\n    var newDetails = _objectSpread(_objectSpread({}, details), {}, {\n      id: undefined,\n      color: color\n    });\n    return ExpoCalendar.saveCalendarAsync(newDetails);\n  });\n  return _createCalendarAsync.apply(this, arguments);\n}\nexport function updateCalendarAsync(_x2) {\n  return _updateCalendarAsync.apply(this, arguments);\n}\nfunction _updateCalendarAsync() {\n  _updateCalendarAsync = _asyncToGenerator(function* (id) {\n    var details = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!ExpoCalendar.saveCalendarAsync) {\n      throw new UnavailabilityError('Calendar', 'updateCalendarAsync');\n    }\n    if (!id) {\n      throw new Error('updateCalendarAsync must be called with an id (string) of the target calendar');\n    }\n    var color = details.color ? processColor(details.color) : undefined;\n    if (Platform.OS === 'android') {\n      if (details.hasOwnProperty('source') || details.hasOwnProperty('color') || details.hasOwnProperty('allowsModifications') || details.hasOwnProperty('allowedAvailabilities') || details.hasOwnProperty('isPrimary') || details.hasOwnProperty('ownerAccount') || details.hasOwnProperty('timeZone') || details.hasOwnProperty('allowedReminders') || details.hasOwnProperty('allowedAttendeeTypes') || details.hasOwnProperty('accessLevel')) {\n        console.warn('updateCalendarAsync was called with one or more read-only properties, which will not be updated');\n      }\n    } else {\n      if (details.hasOwnProperty('source') || details.hasOwnProperty('type') || details.hasOwnProperty('entityType') || details.hasOwnProperty('allowsModifications') || details.hasOwnProperty('allowedAvailabilities')) {\n        console.warn('updateCalendarAsync was called with one or more read-only properties, which will not be updated');\n      }\n    }\n    var newDetails = _objectSpread(_objectSpread({}, details), {}, {\n      id: id,\n      color: color\n    });\n    return ExpoCalendar.saveCalendarAsync(newDetails);\n  });\n  return _updateCalendarAsync.apply(this, arguments);\n}\nexport function deleteCalendarAsync(_x3) {\n  return _deleteCalendarAsync.apply(this, arguments);\n}\nfunction _deleteCalendarAsync() {\n  _deleteCalendarAsync = _asyncToGenerator(function* (id) {\n    if (!ExpoCalendar.deleteCalendarAsync) {\n      throw new UnavailabilityError('Calendar', 'deleteCalendarAsync');\n    }\n    if (!id) {\n      throw new Error('deleteCalendarAsync must be called with an id (string) of the target calendar');\n    }\n    return ExpoCalendar.deleteCalendarAsync(id);\n  });\n  return _deleteCalendarAsync.apply(this, arguments);\n}\nexport function getEventsAsync(_x4, _x5, _x6) {\n  return _getEventsAsync.apply(this, arguments);\n}\nfunction _getEventsAsync() {\n  _getEventsAsync = _asyncToGenerator(function* (calendarIds, startDate, endDate) {\n    if (!ExpoCalendar.getEventsAsync) {\n      throw new UnavailabilityError('Calendar', 'getEventsAsync');\n    }\n    if (!startDate) {\n      throw new Error('getEventsAsync must be called with a startDate (date) to search for events');\n    }\n    if (!endDate) {\n      throw new Error('getEventsAsync must be called with an endDate (date) to search for events');\n    }\n    if (!calendarIds || !calendarIds.length) {\n      throw new Error('getEventsAsync must be called with a non-empty array of calendarIds to search');\n    }\n    return ExpoCalendar.getEventsAsync(stringifyIfDate(startDate), stringifyIfDate(endDate), calendarIds);\n  });\n  return _getEventsAsync.apply(this, arguments);\n}\nexport function getEventAsync(_x7) {\n  return _getEventAsync.apply(this, arguments);\n}\nfunction _getEventAsync() {\n  _getEventAsync = _asyncToGenerator(function* (id) {\n    var recurringEventOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!ExpoCalendar.getEventByIdAsync) {\n      throw new UnavailabilityError('Calendar', 'getEventAsync');\n    }\n    if (!id) {\n      throw new Error('getEventAsync must be called with an id (string) of the target event');\n    }\n    if (Platform.OS === 'ios') {\n      return ExpoCalendar.getEventByIdAsync(id, recurringEventOptions.instanceStartDate);\n    } else {\n      return ExpoCalendar.getEventByIdAsync(id);\n    }\n  });\n  return _getEventAsync.apply(this, arguments);\n}\nexport function createEventAsync(_x8) {\n  return _createEventAsync.apply(this, arguments);\n}\nfunction _createEventAsync() {\n  _createEventAsync = _asyncToGenerator(function* (calendarId) {\n    var eventData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!ExpoCalendar.saveEventAsync) {\n      throw new UnavailabilityError('Calendar', 'createEventAsync');\n    }\n    if (!calendarId) {\n      throw new Error('createEventAsync must be called with an id (string) of the target calendar');\n    }\n    var id = eventData.id,\n      details = _objectWithoutProperties(eventData, _excluded);\n    if (Platform.OS === 'android') {\n      if (!details.startDate) {\n        throw new Error('createEventAsync requires a startDate (Date)');\n      }\n      if (!details.endDate) {\n        throw new Error('createEventAsync requires an endDate (Date)');\n      }\n    }\n    var newDetails = _objectSpread(_objectSpread({}, details), {}, {\n      calendarId: calendarId\n    });\n    return ExpoCalendar.saveEventAsync(stringifyDateValues(newDetails), {});\n  });\n  return _createEventAsync.apply(this, arguments);\n}\nexport function updateEventAsync(_x9) {\n  return _updateEventAsync.apply(this, arguments);\n}\nfunction _updateEventAsync() {\n  _updateEventAsync = _asyncToGenerator(function* (id) {\n    var details = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var recurringEventOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (!ExpoCalendar.saveEventAsync) {\n      throw new UnavailabilityError('Calendar', 'updateEventAsync');\n    }\n    if (!id) {\n      throw new Error('updateEventAsync must be called with an id (string) of the target event');\n    }\n    if (Platform.OS === 'ios') {\n      if (details.hasOwnProperty('creationDate') || details.hasOwnProperty('lastModifiedDate') || details.hasOwnProperty('originalStartDate') || details.hasOwnProperty('isDetached') || details.hasOwnProperty('status') || details.hasOwnProperty('organizer')) {\n        console.warn('updateEventAsync was called with one or more read-only properties, which will not be updated');\n      }\n    }\n    var _recurringEventOption = recurringEventOptions.futureEvents,\n      futureEvents = _recurringEventOption === void 0 ? false : _recurringEventOption,\n      instanceStartDate = recurringEventOptions.instanceStartDate;\n    var newDetails = _objectSpread(_objectSpread({}, details), {}, {\n      id: id,\n      instanceStartDate: instanceStartDate\n    });\n    return ExpoCalendar.saveEventAsync(stringifyDateValues(newDetails), {\n      futureEvents: futureEvents\n    });\n  });\n  return _updateEventAsync.apply(this, arguments);\n}\nexport function deleteEventAsync(_x10) {\n  return _deleteEventAsync.apply(this, arguments);\n}\nfunction _deleteEventAsync() {\n  _deleteEventAsync = _asyncToGenerator(function* (id) {\n    var recurringEventOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!ExpoCalendar.deleteEventAsync) {\n      throw new UnavailabilityError('Calendar', 'deleteEventAsync');\n    }\n    if (!id) {\n      throw new Error('deleteEventAsync must be called with an id (string) of the target event');\n    }\n    var _recurringEventOption2 = recurringEventOptions.futureEvents,\n      futureEvents = _recurringEventOption2 === void 0 ? false : _recurringEventOption2,\n      instanceStartDate = recurringEventOptions.instanceStartDate;\n    return ExpoCalendar.deleteEventAsync({\n      id: id,\n      instanceStartDate: instanceStartDate\n    }, {\n      futureEvents: futureEvents\n    });\n  });\n  return _deleteEventAsync.apply(this, arguments);\n}\nexport function getAttendeesForEventAsync(_x11) {\n  return _getAttendeesForEventAsync.apply(this, arguments);\n}\nfunction _getAttendeesForEventAsync() {\n  _getAttendeesForEventAsync = _asyncToGenerator(function* (id) {\n    var recurringEventOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!ExpoCalendar.getAttendeesForEventAsync) {\n      throw new UnavailabilityError('Calendar', 'getAttendeesForEventAsync');\n    }\n    if (!id) {\n      throw new Error('getAttendeesForEventAsync must be called with an id (string) of the target event');\n    }\n    var instanceStartDate = recurringEventOptions.instanceStartDate;\n    var params = Platform.OS === 'ios' ? {\n      id: id,\n      instanceStartDate: instanceStartDate\n    } : id;\n    return ExpoCalendar.getAttendeesForEventAsync(params);\n  });\n  return _getAttendeesForEventAsync.apply(this, arguments);\n}\nexport function createAttendeeAsync(_x12) {\n  return _createAttendeeAsync.apply(this, arguments);\n}\nfunction _createAttendeeAsync() {\n  _createAttendeeAsync = _asyncToGenerator(function* (eventId) {\n    var details = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!ExpoCalendar.saveAttendeeForEventAsync) {\n      throw new UnavailabilityError('Calendar', 'createAttendeeAsync');\n    }\n    if (!eventId) {\n      throw new Error('createAttendeeAsync must be called with an id (string) of the target event');\n    }\n    if (!details.email) {\n      throw new Error('createAttendeeAsync requires an email (string)');\n    }\n    if (!details.role) {\n      throw new Error('createAttendeeAsync requires a role (string)');\n    }\n    if (!details.type) {\n      throw new Error('createAttendeeAsync requires a type (string)');\n    }\n    if (!details.status) {\n      throw new Error('createAttendeeAsync requires a status (string)');\n    }\n    var newDetails = _objectSpread(_objectSpread({}, details), {}, {\n      id: undefined\n    });\n    return ExpoCalendar.saveAttendeeForEventAsync(newDetails, eventId);\n  });\n  return _createAttendeeAsync.apply(this, arguments);\n}\nexport function updateAttendeeAsync(_x13) {\n  return _updateAttendeeAsync.apply(this, arguments);\n}\nfunction _updateAttendeeAsync() {\n  _updateAttendeeAsync = _asyncToGenerator(function* (id) {\n    var details = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!ExpoCalendar.saveAttendeeForEventAsync) {\n      throw new UnavailabilityError('Calendar', 'updateAttendeeAsync');\n    }\n    if (!id) {\n      throw new Error('updateAttendeeAsync must be called with an id (string) of the target event');\n    }\n    var newDetails = _objectSpread(_objectSpread({}, details), {}, {\n      id: id\n    });\n    return ExpoCalendar.saveAttendeeForEventAsync(newDetails, null);\n  });\n  return _updateAttendeeAsync.apply(this, arguments);\n}\nexport function getDefaultCalendarAsync() {\n  return _getDefaultCalendarAsync.apply(this, arguments);\n}\nfunction _getDefaultCalendarAsync() {\n  _getDefaultCalendarAsync = _asyncToGenerator(function* () {\n    if (!ExpoCalendar.getDefaultCalendarAsync) {\n      throw new UnavailabilityError('Calendar', 'getDefaultCalendarAsync');\n    }\n    return ExpoCalendar.getDefaultCalendarAsync();\n  });\n  return _getDefaultCalendarAsync.apply(this, arguments);\n}\nexport function deleteAttendeeAsync(_x14) {\n  return _deleteAttendeeAsync.apply(this, arguments);\n}\nfunction _deleteAttendeeAsync() {\n  _deleteAttendeeAsync = _asyncToGenerator(function* (id) {\n    if (!ExpoCalendar.deleteAttendeeAsync) {\n      throw new UnavailabilityError('Calendar', 'deleteAttendeeAsync');\n    }\n    if (!id) {\n      throw new Error('deleteAttendeeAsync must be called with an id (string) of the target event');\n    }\n    return ExpoCalendar.deleteAttendeeAsync(id);\n  });\n  return _deleteAttendeeAsync.apply(this, arguments);\n}\nexport function getRemindersAsync(_x15, _x16, _x17, _x18) {\n  return _getRemindersAsync.apply(this, arguments);\n}\nfunction _getRemindersAsync() {\n  _getRemindersAsync = _asyncToGenerator(function* (calendarIds, status, startDate, endDate) {\n    if (!ExpoCalendar.getRemindersAsync) {\n      throw new UnavailabilityError('Calendar', 'getRemindersAsync');\n    }\n    if (status && !startDate) {\n      throw new Error('getRemindersAsync must be called with a startDate (date) to search for reminders');\n    }\n    if (status && !endDate) {\n      throw new Error('getRemindersAsync must be called with an endDate (date) to search for reminders');\n    }\n    if (!calendarIds || !calendarIds.length) {\n      throw new Error('getRemindersAsync must be called with a non-empty array of calendarIds to search');\n    }\n    return ExpoCalendar.getRemindersAsync(stringifyIfDate(startDate) || null, stringifyIfDate(endDate) || null, calendarIds, status || null);\n  });\n  return _getRemindersAsync.apply(this, arguments);\n}\nexport function getReminderAsync(_x19) {\n  return _getReminderAsync.apply(this, arguments);\n}\nfunction _getReminderAsync() {\n  _getReminderAsync = _asyncToGenerator(function* (id) {\n    if (!ExpoCalendar.getReminderByIdAsync) {\n      throw new UnavailabilityError('Calendar', 'getReminderAsync');\n    }\n    if (!id) {\n      throw new Error('getReminderAsync must be called with an id (string) of the target reminder');\n    }\n    return ExpoCalendar.getReminderByIdAsync(id);\n  });\n  return _getReminderAsync.apply(this, arguments);\n}\nexport function createReminderAsync(_x20) {\n  return _createReminderAsync.apply(this, arguments);\n}\nfunction _createReminderAsync() {\n  _createReminderAsync = _asyncToGenerator(function* (calendarId) {\n    var reminder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!ExpoCalendar.saveReminderAsync) {\n      throw new UnavailabilityError('Calendar', 'createReminderAsync');\n    }\n    var id = reminder.id,\n      details = _objectWithoutProperties(reminder, _excluded2);\n    var newDetails = _objectSpread(_objectSpread({}, details), {}, {\n      calendarId: calendarId === null ? undefined : calendarId\n    });\n    return ExpoCalendar.saveReminderAsync(stringifyDateValues(newDetails));\n  });\n  return _createReminderAsync.apply(this, arguments);\n}\nexport function updateReminderAsync(_x21) {\n  return _updateReminderAsync.apply(this, arguments);\n}\nfunction _updateReminderAsync() {\n  _updateReminderAsync = _asyncToGenerator(function* (id) {\n    var details = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!ExpoCalendar.saveReminderAsync) {\n      throw new UnavailabilityError('Calendar', 'updateReminderAsync');\n    }\n    if (!id) {\n      throw new Error('updateReminderAsync must be called with an id (string) of the target reminder');\n    }\n    if (details.hasOwnProperty('creationDate') || details.hasOwnProperty('lastModifiedDate')) {\n      console.warn('updateReminderAsync was called with one or more read-only properties, which will not be updated');\n    }\n    var newDetails = _objectSpread(_objectSpread({}, details), {}, {\n      id: id\n    });\n    return ExpoCalendar.saveReminderAsync(stringifyDateValues(newDetails));\n  });\n  return _updateReminderAsync.apply(this, arguments);\n}\nexport function deleteReminderAsync(_x22) {\n  return _deleteReminderAsync.apply(this, arguments);\n}\nfunction _deleteReminderAsync() {\n  _deleteReminderAsync = _asyncToGenerator(function* (id) {\n    if (!ExpoCalendar.deleteReminderAsync) {\n      throw new UnavailabilityError('Calendar', 'deleteReminderAsync');\n    }\n    if (!id) {\n      throw new Error('deleteReminderAsync must be called with an id (string) of the target reminder');\n    }\n    return ExpoCalendar.deleteReminderAsync(id);\n  });\n  return _deleteReminderAsync.apply(this, arguments);\n}\nexport function getSourcesAsync() {\n  return _getSourcesAsync.apply(this, arguments);\n}\nfunction _getSourcesAsync() {\n  _getSourcesAsync = _asyncToGenerator(function* () {\n    if (!ExpoCalendar.getSourcesAsync) {\n      throw new UnavailabilityError('Calendar', 'getSourcesAsync');\n    }\n    return ExpoCalendar.getSourcesAsync();\n  });\n  return _getSourcesAsync.apply(this, arguments);\n}\nexport function getSourceAsync(_x23) {\n  return _getSourceAsync.apply(this, arguments);\n}\nfunction _getSourceAsync() {\n  _getSourceAsync = _asyncToGenerator(function* (id) {\n    if (!ExpoCalendar.getSourceByIdAsync) {\n      throw new UnavailabilityError('Calendar', 'getSourceAsync');\n    }\n    if (!id) {\n      throw new Error('getSourceAsync must be called with an id (string) of the target source');\n    }\n    return ExpoCalendar.getSourceByIdAsync(id);\n  });\n  return _getSourceAsync.apply(this, arguments);\n}\nexport function openEventInCalendar(id) {\n  if (!ExpoCalendar.openEventInCalendar) {\n    console.warn(\"openEventInCalendar is not available on platform: \" + Platform.OS);\n    return;\n  }\n  if (!id) {\n    throw new Error('openEventInCalendar must be called with an id (string) of the target event');\n  }\n  return ExpoCalendar.openEventInCalendar(parseInt(id, 10));\n}\nexport function requestPermissionsAsync() {\n  return _requestPermissionsAsync.apply(this, arguments);\n}\nfunction _requestPermissionsAsync() {\n  _requestPermissionsAsync = _asyncToGenerator(function* () {\n    console.warn('requestPermissionsAsync is deprecated. Use requestCalendarPermissionsAsync instead.');\n    return requestCalendarPermissionsAsync();\n  });\n  return _requestPermissionsAsync.apply(this, arguments);\n}\nexport function getCalendarPermissionsAsync() {\n  return _getCalendarPermissionsAsync.apply(this, arguments);\n}\nfunction _getCalendarPermissionsAsync() {\n  _getCalendarPermissionsAsync = _asyncToGenerator(function* () {\n    if (!ExpoCalendar.getCalendarPermissionsAsync) {\n      throw new UnavailabilityError('Calendar', 'getCalendarPermissionsAsync');\n    }\n    return ExpoCalendar.getCalendarPermissionsAsync();\n  });\n  return _getCalendarPermissionsAsync.apply(this, arguments);\n}\nexport function getRemindersPermissionsAsync() {\n  return _getRemindersPermissionsAsync.apply(this, arguments);\n}\nfunction _getRemindersPermissionsAsync() {\n  _getRemindersPermissionsAsync = _asyncToGenerator(function* () {\n    if (!ExpoCalendar.getRemindersPermissionsAsync) {\n      throw new UnavailabilityError('Calendar', 'getRemindersPermissionsAsync');\n    }\n    return ExpoCalendar.getRemindersPermissionsAsync();\n  });\n  return _getRemindersPermissionsAsync.apply(this, arguments);\n}\nexport function requestCalendarPermissionsAsync() {\n  return _requestCalendarPermissionsAsync.apply(this, arguments);\n}\nfunction _requestCalendarPermissionsAsync() {\n  _requestCalendarPermissionsAsync = _asyncToGenerator(function* () {\n    if (!ExpoCalendar.requestCalendarPermissionsAsync) {\n      throw new UnavailabilityError('Calendar', 'requestCalendarPermissionsAsync');\n    }\n    return yield ExpoCalendar.requestCalendarPermissionsAsync();\n  });\n  return _requestCalendarPermissionsAsync.apply(this, arguments);\n}\nexport function requestRemindersPermissionsAsync() {\n  return _requestRemindersPermissionsAsync.apply(this, arguments);\n}\nfunction _requestRemindersPermissionsAsync() {\n  _requestRemindersPermissionsAsync = _asyncToGenerator(function* () {\n    if (!ExpoCalendar.requestRemindersPermissionsAsync) {\n      throw new UnavailabilityError('Calendar', 'requestRemindersPermissionsAsync');\n    }\n    return yield ExpoCalendar.requestRemindersPermissionsAsync();\n  });\n  return _requestRemindersPermissionsAsync.apply(this, arguments);\n}\nexport var useCalendarPermissions = createPermissionHook({\n  getMethod: getCalendarPermissionsAsync,\n  requestMethod: requestCalendarPermissionsAsync\n});\nexport var useRemindersPermissions = createPermissionHook({\n  getMethod: getRemindersPermissionsAsync,\n  requestMethod: requestRemindersPermissionsAsync\n});\nexport var EntityTypes = {\n  EVENT: 'event',\n  REMINDER: 'reminder'\n};\nexport var Frequency = {\n  DAILY: 'daily',\n  WEEKLY: 'weekly',\n  MONTHLY: 'monthly',\n  YEARLY: 'yearly'\n};\nexport var Availability = {\n  NOT_SUPPORTED: 'notSupported',\n  BUSY: 'busy',\n  FREE: 'free',\n  TENTATIVE: 'tentative',\n  UNAVAILABLE: 'unavailable'\n};\nexport var CalendarType = {\n  LOCAL: 'local',\n  CALDAV: 'caldav',\n  EXCHANGE: 'exchange',\n  SUBSCRIBED: 'subscribed',\n  BIRTHDAYS: 'birthdays',\n  UNKNOWN: 'unknown'\n};\nexport var EventStatus = {\n  NONE: 'none',\n  CONFIRMED: 'confirmed',\n  TENTATIVE: 'tentative',\n  CANCELED: 'canceled'\n};\nexport var SourceType = {\n  LOCAL: 'local',\n  EXCHANGE: 'exchange',\n  CALDAV: 'caldav',\n  MOBILEME: 'mobileme',\n  SUBSCRIBED: 'subscribed',\n  BIRTHDAYS: 'birthdays'\n};\nexport var AttendeeRole = {\n  UNKNOWN: 'unknown',\n  REQUIRED: 'required',\n  OPTIONAL: 'optional',\n  CHAIR: 'chair',\n  NON_PARTICIPANT: 'nonParticipant',\n  ATTENDEE: 'attendee',\n  ORGANIZER: 'organizer',\n  PERFORMER: 'performer',\n  SPEAKER: 'speaker',\n  NONE: 'none'\n};\nexport var AttendeeStatus = {\n  UNKNOWN: 'unknown',\n  PENDING: 'pending',\n  ACCEPTED: 'accepted',\n  DECLINED: 'declined',\n  TENTATIVE: 'tentative',\n  DELEGATED: 'delegated',\n  COMPLETED: 'completed',\n  IN_PROCESS: 'inProcess',\n  INVITED: 'invited',\n  NONE: 'none'\n};\nexport var AttendeeType = {\n  UNKNOWN: 'unknown',\n  PERSON: 'person',\n  ROOM: 'room',\n  GROUP: 'group',\n  RESOURCE: 'resource',\n  OPTIONAL: 'optional',\n  REQUIRED: 'required',\n  NONE: 'none'\n};\nexport var AlarmMethod = {\n  ALARM: 'alarm',\n  ALERT: 'alert',\n  EMAIL: 'email',\n  SMS: 'sms',\n  DEFAULT: 'default'\n};\nexport var EventAccessLevel = {\n  CONFIDENTIAL: 'confidential',\n  PRIVATE: 'private',\n  PUBLIC: 'public',\n  DEFAULT: 'default'\n};\nexport var CalendarAccessLevel = {\n  CONTRIBUTOR: 'contributor',\n  EDITOR: 'editor',\n  FREEBUSY: 'freebusy',\n  OVERRIDE: 'override',\n  OWNER: 'owner',\n  READ: 'read',\n  RESPOND: 'respond',\n  ROOT: 'root',\n  NONE: 'none'\n};\nexport var ReminderStatus = {\n  COMPLETED: 'completed',\n  INCOMPLETE: 'incomplete'\n};\nfunction stringifyIfDate(date) {\n  return date instanceof Date ? date.toISOString() : date;\n}\nfunction stringifyDateValues(obj) {\n  return Object.keys(obj).reduce(function (acc, key) {\n    var value = obj[key];\n    if (value != null && typeof value === 'object' && !(value instanceof Date)) {\n      if (Array.isArray(value)) {\n        return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, key, value.map(stringifyDateValues)));\n      }\n      return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, key, stringifyDateValues(value)));\n    }\n    acc[key] = stringifyIfDate(value);\n    return acc;\n  }, {});\n}","map":{"version":3,"names":["PermissionStatus","createPermissionHook","UnavailabilityError","Platform","processColor","ExpoCalendar","DayOfTheWeek","MonthOfTheYear","isAvailableAsync","_isAvailableAsync","apply","arguments","_asyncToGenerator","getCalendarsAsync","_x","_getCalendarsAsync","entityType","createCalendarAsync","_createCalendarAsync","details","length","undefined","saveCalendarAsync","color","newDetails","_objectSpread","id","updateCalendarAsync","_x2","_updateCalendarAsync","Error","OS","hasOwnProperty","console","warn","deleteCalendarAsync","_x3","_deleteCalendarAsync","getEventsAsync","_x4","_x5","_x6","_getEventsAsync","calendarIds","startDate","endDate","stringifyIfDate","getEventAsync","_x7","_getEventAsync","recurringEventOptions","getEventByIdAsync","instanceStartDate","createEventAsync","_x8","_createEventAsync","calendarId","eventData","saveEventAsync","_objectWithoutProperties","_excluded","stringifyDateValues","updateEventAsync","_x9","_updateEventAsync","_recurringEventOption","futureEvents","deleteEventAsync","_x10","_deleteEventAsync","_recurringEventOption2","getAttendeesForEventAsync","_x11","_getAttendeesForEventAsync","params","createAttendeeAsync","_x12","_createAttendeeAsync","eventId","saveAttendeeForEventAsync","email","role","type","status","updateAttendeeAsync","_x13","_updateAttendeeAsync","getDefaultCalendarAsync","_getDefaultCalendarAsync","deleteAttendeeAsync","_x14","_deleteAttendeeAsync","getRemindersAsync","_x15","_x16","_x17","_x18","_getRemindersAsync","getReminderAsync","_x19","_getReminderAsync","getReminderByIdAsync","createReminderAsync","_x20","_createReminderAsync","reminder","saveReminderAsync","_excluded2","updateReminderAsync","_x21","_updateReminderAsync","deleteReminderAsync","_x22","_deleteReminderAsync","getSourcesAsync","_getSourcesAsync","getSourceAsync","_x23","_getSourceAsync","getSourceByIdAsync","openEventInCalendar","parseInt","requestPermissionsAsync","_requestPermissionsAsync","requestCalendarPermissionsAsync","getCalendarPermissionsAsync","_getCalendarPermissionsAsync","getRemindersPermissionsAsync","_getRemindersPermissionsAsync","_requestCalendarPermissionsAsync","requestRemindersPermissionsAsync","_requestRemindersPermissionsAsync","useCalendarPermissions","getMethod","requestMethod","useRemindersPermissions","EntityTypes","EVENT","REMINDER","Frequency","DAILY","WEEKLY","MONTHLY","YEARLY","Availability","NOT_SUPPORTED","BUSY","FREE","TENTATIVE","UNAVAILABLE","CalendarType","LOCAL","CALDAV","EXCHANGE","SUBSCRIBED","BIRTHDAYS","UNKNOWN","EventStatus","NONE","CONFIRMED","CANCELED","SourceType","MOBILEME","AttendeeRole","REQUIRED","OPTIONAL","CHAIR","NON_PARTICIPANT","ATTENDEE","ORGANIZER","PERFORMER","SPEAKER","AttendeeStatus","PENDING","ACCEPTED","DECLINED","DELEGATED","COMPLETED","IN_PROCESS","INVITED","AttendeeType","PERSON","ROOM","GROUP","RESOURCE","AlarmMethod","ALARM","ALERT","EMAIL","SMS","DEFAULT","EventAccessLevel","CONFIDENTIAL","PRIVATE","PUBLIC","CalendarAccessLevel","CONTRIBUTOR","EDITOR","FREEBUSY","OVERRIDE","OWNER","READ","RESPOND","ROOT","ReminderStatus","INCOMPLETE","date","Date","toISOString","obj","Object","keys","reduce","acc","key","value","Array","isArray","_defineProperty","map"],"sources":["D:\\mobile\\NguyenTQ\\node_modules\\expo-calendar\\src\\Calendar.ts"],"sourcesContent":["import {\n  PermissionResponse,\n  PermissionStatus,\n  PermissionHookOptions,\n  createPermissionHook,\n  UnavailabilityError,\n} from 'expo-modules-core';\nimport { Platform, processColor } from 'react-native';\n\nimport ExpoCalendar from './ExpoCalendar';\n\n// @needsAudit\n/**\n * @platform ios\n */\nexport type RecurringEventOptions = {\n  /**\n   * Whether or not future events in the recurring series should also be updated. If `true`, will\n   * apply the given changes to the recurring instance specified by `instanceStartDate` and all\n   * future events in the series. If `false`, will only apply the given changes to the instance\n   * specified by `instanceStartDate`.\n   */\n  futureEvents?: boolean;\n  /**\n   * Date object representing the start time of the desired instance, if looking for a single instance\n   * of a recurring event. If this is not provided and **id** represents a recurring event, the first\n   * instance of that event will be returned by default.\n   */\n  instanceStartDate?: string | Date;\n};\n\n// @needsAudit\n/**\n * A calendar record upon which events (or, on iOS, reminders) can be stored. Settings here apply to\n * the calendar as a whole and how its events are displayed in the OS calendar app.\n */\nexport type Calendar = {\n  /**\n   * Internal ID that represents this calendar on the device.\n   */\n  id: string;\n  /**\n   * Visible name of the calendar.\n   */\n  title: string;\n  /**\n   * ID of the source to be used for the calendar. Likely the same as the source for any other\n   * locally stored calendars.\n   * @platform ios\n   */\n  sourceId?: string;\n  /**\n   * Object representing the source to be used for the calendar.\n   */\n  source: Source;\n  /**\n   * Type of calendar this object represents.\n   * Possible values: [`CalendarType`](#calendarcalendartype).\n   * @platform ios\n   */\n  type?: string;\n  /**\n   * Color used to display this calendar's events.\n   */\n  color: string;\n  /**\n   * Whether the calendar is used in the Calendar or Reminders OS app.\n   * Possible values: [`EntityTypes`](#calendarentitytypes).\n   * @platform ios\n   */\n  entityType?: string;\n  /**\n   * Boolean value that determines whether this calendar can be modified.\n   */\n  allowsModifications: boolean;\n  /**\n   * Availability types that this calendar supports.\n   * Possible values: Array of [`Availability`](#calendaravailability).\n   */\n  allowedAvailabilities: string[];\n  /**\n   * Boolean value indicating whether this is the device's primary calendar.\n   * @platform android\n   */\n  isPrimary?: boolean;\n  /**\n   * Internal system name of the calendar.\n   * @platform android\n   */\n  name?: string | null;\n  /**\n   * Name for the account that owns this calendar.\n   * @platform android\n   */\n  ownerAccount?: string;\n  /**\n   * Time zone for the calendar.\n   * @platform android\n   */\n  timeZone?: string;\n  /**\n   * Alarm methods that this calendar supports.\n   * Possible values: Array of [`AlarmMethod`](#calendaralarmmethod).\n   * @platform android\n   */\n  allowedReminders?: string[];\n  /**\n   * Attendee types that this calendar supports.\n   * Possible values: Array of [`AttendeeType`](#calendarattendeetype).\n   * @platform android\n   */\n  allowedAttendeeTypes?: string[];\n  /**\n   * Indicates whether the OS displays events on this calendar.\n   * @platform android\n   */\n  isVisible?: boolean;\n  /**\n   * Indicates whether this calendar is synced and its events stored on the device.\n   * Unexpected behavior may occur if this is not set to `true`.\n   * @platform android\n   */\n  isSynced?: boolean;\n  /**\n   * Level of access that the user has for the calendar.\n   * Possible values: [`CalendarAccessLevel`](#calendarcalendaraccesslevel).\n   * @platform android\n   */\n  accessLevel?: string;\n};\n\n// @needsAudit\n/**\n * A source account that owns a particular calendar. Expo apps will typically not need to interact with `Source` objects.\n */\nexport type Source = {\n  /**\n   * Internal ID that represents this source on the device.\n   * @platform ios\n   */\n  id?: string;\n  /**\n   * Type of the account that owns this calendar and was used to sync it to the device.\n   * If `isLocalAccount` is falsy then this must be defined, and must match an account on the device\n   * along with `name`, or the OS will delete the calendar.\n   * On iOS, one of [`SourceType`](#calendarsourcetype)s.\n   */\n  type: string;\n  /**\n   * Name for the account that owns this calendar and was used to sync the calendar to the device.\n   */\n  name: string;\n  /**\n   * Whether this source is the local phone account. Must be `true` if `type` is `undefined`.\n   * @platform android\n   */\n  isLocalAccount?: boolean;\n};\n\n// @needsAudit\n/**\n * An event record, or a single instance of a recurring event. On iOS, used in the Calendar app.\n */\nexport type Event = {\n  /**\n   * Internal ID that represents this event on the device.\n   */\n  id: string;\n  /**\n   * ID of the calendar that contains this event.\n   */\n  calendarId: string;\n  /**\n   * Visible name of the event.\n   */\n  title: string;\n  /**\n   * Location field of the event.\n   */\n  location: string;\n  /**\n   * Date when the event record was created.\n   * @platform ios\n   */\n  creationDate?: string | Date;\n  /**\n   * Date when the event record was last modified.\n   * @platform ios\n   */\n  lastModifiedDate?: string | Date;\n  /**\n   * Time zone the event is scheduled in.\n   */\n  timeZone: string;\n  /**\n   * Time zone for the event end time.\n   * @platform android\n   */\n  endTimeZone?: string;\n  /**\n   * URL for the event.\n   * @platform ios\n   */\n  url?: string;\n  /**\n   * Description or notes saved with the event.\n   */\n  notes: string;\n  /**\n   * Array of Alarm objects which control automated reminders to the user.\n   */\n  alarms: Alarm[];\n  /**\n   * Object representing rules for recurring or repeating events. Set to `null` for one-time events.\n   */\n  recurrenceRule: RecurrenceRule;\n  /**\n   * Date object or string representing the time when the event starts.\n   */\n  startDate: string | Date;\n  /**\n   * Date object or string representing the time when the event ends.\n   */\n  endDate: string | Date;\n  /**\n   * For recurring events, the start date for the first (original) instance of the event.\n   * @platform ios\n   */\n  originalStartDate?: string | Date;\n  /**\n   * Boolean value indicating whether or not the event is a detached (modified) instance of a recurring event.\n   * @platform ios\n   */\n  isDetached?: boolean;\n  /**\n   * Whether the event is displayed as an all-day event on the calendar\n   */\n  allDay: boolean;\n  /**\n   * The availability setting for the event.\n   * Possible values: [`Availability`](#calendaravailability).\n   */\n  availability: string;\n  /**\n   * Status of the event.\n   * Possible values: [`EventStatus`](#calendareventstatus).\n   */\n  status: string;\n  /**\n   * Organizer of the event.\n   * @platform ios\n   */\n  organizer?: string;\n  /**\n   * Email address of the organizer of the event.\n   * @platform android\n   */\n  organizerEmail?: string;\n  /**\n   * User's access level for the event.\n   * Possible values: [`EventAccessLevel`](#calendareventaccesslevel).\n   * @platform android\n   */\n  accessLevel?: string;\n  /**\n   * Whether invited guests can modify the details of the event.\n   * @platform android\n   */\n  guestsCanModify?: boolean;\n  /**\n   * Whether invited guests can invite other guests.\n   * @platform android\n   */\n  guestsCanInviteOthers?: boolean;\n  /**\n   * Whether invited guests can see other guests.\n   * @platform android\n   */\n  guestsCanSeeGuests?: boolean;\n  /**\n   * For detached (modified) instances of recurring events, the ID of the original recurring event.\n   * @platform android\n   */\n  originalId?: string;\n  /**\n   * For instances of recurring events, volatile ID representing this instance. Not guaranteed to\n   * always refer to the same instance.\n   * @platform android\n   */\n  instanceId?: string;\n};\n\n// @needsAudit\n/**\n * A reminder record, used in the iOS Reminders app. No direct analog on Android.\n * @platform ios\n */\nexport type Reminder = {\n  /**\n   * Internal ID that represents this reminder on the device.\n   */\n  id?: string;\n  /**\n   * ID of the calendar that contains this reminder.\n   */\n  calendarId?: string;\n  /**\n   * Visible name of the reminder.\n   */\n  title?: string;\n  /**\n   * Location field of the reminder\n   */\n  location?: string;\n  /**\n   * Date when the reminder record was created.\n   */\n  creationDate?: string | Date;\n  /**\n   * Date when the reminder record was last modified.\n   */\n  lastModifiedDate?: string | Date;\n  /**\n   * Time zone the reminder is scheduled in.\n   */\n  timeZone?: string;\n  /**\n   * URL for the reminder.\n   */\n  url?: string;\n  /**\n   * Description or notes saved with the reminder.\n   */\n  notes?: string;\n  /**\n   * Array of Alarm objects which control automated alarms to the user about the task.\n   */\n  alarms?: Alarm[];\n  /**\n   * Object representing rules for recurring or repeated reminders. Null for one-time tasks.\n   */\n  recurrenceRule?: RecurrenceRule;\n  /**\n   * Date object or string representing the start date of the reminder task.\n   */\n  startDate?: string | Date;\n  /**\n   * Date object or string representing the time when the reminder task is due.\n   */\n  dueDate?: string | Date;\n  /**\n   * Indicates whether or not the task has been completed.\n   */\n  completed?: boolean;\n  /**\n   * Date object or string representing the date of completion, if `completed` is `true`.\n   * Setting this property of a nonnull `Date` will automatically set the reminder's `completed` value to `true`.\n   */\n  completionDate?: string | Date;\n};\n\n// @needsAudit\n/**\n * A person or entity that is associated with an event by being invited or fulfilling some other role.\n */\nexport type Attendee = {\n  /**\n   * Internal ID that represents this attendee on the device.\n   * @platform android\n   */\n  id?: string;\n  /**\n   * Indicates whether or not this attendee is the current OS user.\n   * @platform ios\n   */\n  isCurrentUser?: boolean;\n  /**\n   * Displayed name of the attendee.\n   */\n  name: string;\n  /**\n   * Role of the attendee at the event.\n   * Possible values: [`AttendeeRole`](#calendarattendeerole).\n   */\n  role: string;\n  /**\n   * Status of the attendee in relation to the event.\n   * Possible values: [`AttendeeStatus`](#calendarattendeestatus).\n   */\n  status: string;\n  /**\n   * Type of the attendee.\n   * Possible values: [`AttendeeType`](#calendarattendeetype).\n   */\n  type: string;\n  /**\n   * URL for the attendee.\n   * @platform ios\n   */\n  url?: string;\n  /**\n   * Email address of the attendee.\n   * @platform android\n   */\n  email?: string;\n};\n\n// @needsAudit\n/**\n * A method for having the OS automatically remind the user about an calendar item.\n */\nexport type Alarm = {\n  /**\n   * Date object or string representing an absolute time the alarm should occur.\n   * Overrides `relativeOffset` and `structuredLocation` if specified alongside either.\n   * @platform ios\n   */\n  absoluteDate?: string;\n  /**\n   * Number of minutes from the `startDate` of the calendar item that the alarm should occur.\n   * Use negative values to have the alarm occur before the `startDate`.\n   */\n  relativeOffset?: number;\n  // @docsMissing\n  structuredLocation?: AlarmLocation;\n  /**\n   * Method of alerting the user that this alarm should use; on iOS this is always a notification.\n   * Possible values: [`AlarmMethod`](#calendaralarmmethod).\n   * @platform android\n   */\n  method?: string;\n};\n\n// @needsAudit @docsMissing\nexport type AlarmLocation = {\n  /**\n   * @platform ios\n   */\n  title?: string;\n  proximity?: string;\n  radius?: number;\n  coords?: {\n    latitude?: number;\n    longitude?: number;\n  };\n};\n\nexport enum DayOfTheWeek {\n  Sunday = 1,\n  Monday = 2,\n  Tuesday = 3,\n  Wednesday = 4,\n  Thursday = 5,\n  Friday = 6,\n  Saturday = 7,\n}\n\nexport enum MonthOfTheYear {\n  January = 1,\n  February = 2,\n  March = 3,\n  April = 4,\n  May = 5,\n  June = 6,\n  July = 7,\n  August = 8,\n  September = 9,\n  October = 10,\n  November = 11,\n  December = 12,\n}\n\n// @needsAudit\n/**\n * A recurrence rule for events or reminders, allowing the same calendar item to recur multiple times.\n * This type is based on [the iOS interface](https://developer.apple.com/documentation/eventkit/ekrecurrencerule/1507320-initrecurrencewithfrequency)\n * which is in turn based on [the iCal RFC](https://tools.ietf.org/html/rfc5545#section-3.8.5.3)\n * so you can refer to those to learn more about this potentially complex interface.\n *\n * Not all of the combinations make sense. For example, when frequency is `DAILY`, setting `daysOfTheMonth` makes no sense.\n */\nexport type RecurrenceRule = {\n  /**\n   * How often the calendar item should recur.\n   * Possible values: [`Frequency`](#calendarfrequency).\n   */\n  frequency: string;\n  /**\n   * Interval at which the calendar item should recur. For example, an `interval: 2` with `frequency: DAILY`\n   * would yield an event that recurs every other day.\n   * @default 1\n   */\n  interval?: number;\n  /**\n   * Date on which the calendar item should stop recurring; overrides `occurrence` if both are specified.\n   */\n  endDate?: string | Date;\n  /**\n   * Number of times the calendar item should recur before stopping.\n   */\n  occurrence?: number;\n  /**\n   * The days of the week the event should recur on. An array of [`DaysOfTheWeek`](#daysoftheweek) object.\n   * @platform ios\n   */\n  daysOfTheWeek?: DaysOfTheWeek[];\n  /**\n   * The days of the month this event occurs on.\n   * `-31` to `31` (not including `0`). Negative indicates a value from the end of the range.\n   * This field is only valid for `Calendar.Frequency.Monthly`.\n   * @platform ios\n   */\n  daysOfTheMonth?: number[];\n  /**\n   * The months this event occurs on.\n   * This field is only valid for `Calendar.Frequency.Yearly`.\n   * @platform ios\n   */\n  monthsOfTheYear?: MonthOfTheYear[];\n  /**\n   * The weeks of the year this event occurs on.\n   * `-53` to `53` (not including `0`). Negative indicates a value from the end of the range.\n   * This field is only valid for `Calendar.Frequency.Yearly`.\n   * @platform ios\n   */\n  weeksOfTheYear?: number[];\n  /**\n   * The days of the year this event occurs on.\n   * `-366` to `366` (not including `0`). Negative indicates a value from the end of the range.\n   * This field is only valid for `Calendar.Frequency.Yearly`.\n   * @platform ios\n   */\n  daysOfTheYear?: number[];\n  /**\n   * TAn array of numbers that filters which recurrences to include. For example, for an event that\n   * recurs every Monday, passing 2 here will make it recur every other Monday.\n   * `-366` to `366` (not including `0`). Negative indicates a value from the end of the range.\n   * This field is only valid for `Calendar.Frequency.Yearly`.\n   * @platform ios\n   */\n  setPositions?: number[];\n};\n\n// @needsAudit\n/**\n * @platform ios\n */\nexport type DaysOfTheWeek = {\n  /**\n   * Sunday to Saturday - `DayOfTheWeek` enum.\n   */\n  dayOfTheWeek: DayOfTheWeek;\n  /**\n   * `-53` to `53` (`0` ignores this field, and a negative indicates a value from the end of the range).\n   */\n  weekNumber?: number;\n};\n\nexport { PermissionResponse, PermissionStatus, PermissionHookOptions };\n\n// @needsAudit\n/**\n * Returns whether the Calendar API is enabled on the current device. This does not check the app permissions.\n *\n * @returns Async `boolean`, indicating whether the Calendar API is available on the current device.\n * Currently, this resolves `true` on iOS and Android only.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  return !!ExpoCalendar.getCalendarsAsync;\n}\n\n// @needsAudit\n/**\n * Gets an array of calendar objects with details about the different calendars stored on the device.\n * @param entityType __iOS Only.__ Not required, but if defined, filters the returned calendars to\n * a specific entity type. Possible values are `Calendar.EntityTypes.EVENT` (for calendars shown in\n * the Calendar app) and `Calendar.EntityTypes.REMINDER` (for the Reminders app).\n * > **Note:** If not defined, you will need both permissions: **CALENDAR** and **REMINDERS**.\n * @return An array of [calendar objects](#calendar 'Calendar') matching the provided entity type (if provided).\n */\nexport async function getCalendarsAsync(entityType?: string): Promise<Calendar[]> {\n  if (!ExpoCalendar.getCalendarsAsync) {\n    throw new UnavailabilityError('Calendar', 'getCalendarsAsync');\n  }\n  if (!entityType) {\n    return ExpoCalendar.getCalendarsAsync(null);\n  }\n  return ExpoCalendar.getCalendarsAsync(entityType);\n}\n\n// @needsAudit\n/**\n * Creates a new calendar on the device, allowing events to be added later and displayed in the OS Calendar app.\n * @param details A map of details for the calendar to be created.\n * @return A string representing the ID of the newly created calendar.\n */\nexport async function createCalendarAsync(details: Partial<Calendar> = {}): Promise<string> {\n  if (!ExpoCalendar.saveCalendarAsync) {\n    throw new UnavailabilityError('Calendar', 'createCalendarAsync');\n  }\n  const color = details.color ? processColor(details.color) : undefined;\n  const newDetails = { ...details, id: undefined, color };\n  return ExpoCalendar.saveCalendarAsync(newDetails);\n}\n\n// @needsAudit\n/**\n * Updates the provided details of an existing calendar stored on the device. To remove a property,\n * explicitly set it to `null` in `details`.\n * @param id ID of the calendar to update.\n * @param details A map of properties to be updated.\n */\nexport async function updateCalendarAsync(\n  id: string,\n  details: Partial<Calendar> = {}\n): Promise<string> {\n  if (!ExpoCalendar.saveCalendarAsync) {\n    throw new UnavailabilityError('Calendar', 'updateCalendarAsync');\n  }\n  if (!id) {\n    throw new Error(\n      'updateCalendarAsync must be called with an id (string) of the target calendar'\n    );\n  }\n  const color = details.color ? processColor(details.color) : undefined;\n\n  if (Platform.OS === 'android') {\n    if (\n      details.hasOwnProperty('source') ||\n      details.hasOwnProperty('color') ||\n      details.hasOwnProperty('allowsModifications') ||\n      details.hasOwnProperty('allowedAvailabilities') ||\n      details.hasOwnProperty('isPrimary') ||\n      details.hasOwnProperty('ownerAccount') ||\n      details.hasOwnProperty('timeZone') ||\n      details.hasOwnProperty('allowedReminders') ||\n      details.hasOwnProperty('allowedAttendeeTypes') ||\n      details.hasOwnProperty('accessLevel')\n    ) {\n      console.warn(\n        'updateCalendarAsync was called with one or more read-only properties, which will not be updated'\n      );\n    }\n  } else {\n    if (\n      details.hasOwnProperty('source') ||\n      details.hasOwnProperty('type') ||\n      details.hasOwnProperty('entityType') ||\n      details.hasOwnProperty('allowsModifications') ||\n      details.hasOwnProperty('allowedAvailabilities')\n    ) {\n      console.warn(\n        'updateCalendarAsync was called with one or more read-only properties, which will not be updated'\n      );\n    }\n  }\n\n  const newDetails = { ...details, id, color };\n  return ExpoCalendar.saveCalendarAsync(newDetails);\n}\n\n// @needsAudit\n/**\n * Deletes an existing calendar and all associated events/reminders/attendees from the device. __Use with caution.__\n * @param id ID of the calendar to delete.\n */\nexport async function deleteCalendarAsync(id: string): Promise<void> {\n  if (!ExpoCalendar.deleteCalendarAsync) {\n    throw new UnavailabilityError('Calendar', 'deleteCalendarAsync');\n  }\n  if (!id) {\n    throw new Error(\n      'deleteCalendarAsync must be called with an id (string) of the target calendar'\n    );\n  }\n  return ExpoCalendar.deleteCalendarAsync(id);\n}\n\n// @needsAudit\n/**\n * Returns all events in a given set of calendars over a specified time period. The filtering has\n * slightly different behavior per-platform - on iOS, all events that overlap at all with the\n * `[startDate, endDate]` interval are returned, whereas on Android, only events that begin on or\n * after the `startDate` and end on or before the `endDate` will be returned.\n * @param calendarIds Array of IDs of calendars to search for events in.\n * @param startDate Beginning of time period to search for events in.\n * @param endDate End of time period to search for events in.\n * @return A promise which fulfils with an array of [`Event`](#event) objects matching the search criteria.\n */\nexport async function getEventsAsync(\n  calendarIds: string[],\n  startDate: Date,\n  endDate: Date\n): Promise<Event[]> {\n  if (!ExpoCalendar.getEventsAsync) {\n    throw new UnavailabilityError('Calendar', 'getEventsAsync');\n  }\n  if (!startDate) {\n    throw new Error('getEventsAsync must be called with a startDate (date) to search for events');\n  }\n  if (!endDate) {\n    throw new Error('getEventsAsync must be called with an endDate (date) to search for events');\n  }\n  if (!calendarIds || !calendarIds.length) {\n    throw new Error(\n      'getEventsAsync must be called with a non-empty array of calendarIds to search'\n    );\n  }\n  return ExpoCalendar.getEventsAsync(\n    stringifyIfDate(startDate),\n    stringifyIfDate(endDate),\n    calendarIds\n  );\n}\n\n// @needsAudit\n/**\n * Returns a specific event selected by ID. If a specific instance of a recurring event is desired,\n * the start date of this instance must also be provided, as instances of recurring events do not\n * have their own unique and stable IDs on either iOS or Android.\n * @param id ID of the event to return.\n * @param recurringEventOptions A map of options for recurring events.\n * @return A promise which fulfils with an [`Event`](#event) object matching the provided criteria, if one exists.\n */\nexport async function getEventAsync(\n  id: string,\n  recurringEventOptions: RecurringEventOptions = {}\n): Promise<Event> {\n  if (!ExpoCalendar.getEventByIdAsync) {\n    throw new UnavailabilityError('Calendar', 'getEventAsync');\n  }\n  if (!id) {\n    throw new Error('getEventAsync must be called with an id (string) of the target event');\n  }\n  if (Platform.OS === 'ios') {\n    return ExpoCalendar.getEventByIdAsync(id, recurringEventOptions.instanceStartDate);\n  } else {\n    return ExpoCalendar.getEventByIdAsync(id);\n  }\n}\n\n// @needsAudit\n/**\n * Creates a new event on the specified calendar.\n * @param calendarId ID of the calendar to create this event in.\n * @param eventData A map of details for the event to be created.\n * @return A promise which fulfils with a string representing the ID of the newly created event.\n */\nexport async function createEventAsync(\n  calendarId: string,\n  eventData: Partial<Event> = {}\n): Promise<string> {\n  if (!ExpoCalendar.saveEventAsync) {\n    throw new UnavailabilityError('Calendar', 'createEventAsync');\n  }\n  if (!calendarId) {\n    throw new Error('createEventAsync must be called with an id (string) of the target calendar');\n  }\n\n  const { id, ...details } = eventData;\n\n  if (Platform.OS === 'android') {\n    if (!details.startDate) {\n      throw new Error('createEventAsync requires a startDate (Date)');\n    }\n    if (!details.endDate) {\n      throw new Error('createEventAsync requires an endDate (Date)');\n    }\n  }\n\n  const newDetails = {\n    ...details,\n    calendarId,\n  };\n\n  return ExpoCalendar.saveEventAsync(stringifyDateValues(newDetails), {});\n}\n\n// @needsAudit\n/**\n * Updates the provided details of an existing calendar stored on the device. To remove a property,\n * explicitly set it to `null` in `details`.\n * @param id ID of the event to be updated.\n * @param details A map of properties to be updated.\n * @param recurringEventOptions A map of options for recurring events.\n */\nexport async function updateEventAsync(\n  id: string,\n  details: Partial<Event> = {},\n  recurringEventOptions: RecurringEventOptions = {}\n): Promise<string> {\n  if (!ExpoCalendar.saveEventAsync) {\n    throw new UnavailabilityError('Calendar', 'updateEventAsync');\n  }\n  if (!id) {\n    throw new Error('updateEventAsync must be called with an id (string) of the target event');\n  }\n\n  if (Platform.OS === 'ios') {\n    if (\n      details.hasOwnProperty('creationDate') ||\n      details.hasOwnProperty('lastModifiedDate') ||\n      details.hasOwnProperty('originalStartDate') ||\n      details.hasOwnProperty('isDetached') ||\n      details.hasOwnProperty('status') ||\n      details.hasOwnProperty('organizer')\n    ) {\n      console.warn(\n        'updateEventAsync was called with one or more read-only properties, which will not be updated'\n      );\n    }\n  }\n\n  const { futureEvents = false, instanceStartDate } = recurringEventOptions;\n  const newDetails = { ...details, id, instanceStartDate };\n  return ExpoCalendar.saveEventAsync(stringifyDateValues(newDetails), { futureEvents });\n}\n\n// @needsAudit\n/**\n * Deletes an existing event from the device. Use with caution.\n * @param id ID of the event to be deleted.\n * @param recurringEventOptions A map of options for recurring events.\n */\nexport async function deleteEventAsync(\n  id: string,\n  recurringEventOptions: RecurringEventOptions = {}\n): Promise<void> {\n  if (!ExpoCalendar.deleteEventAsync) {\n    throw new UnavailabilityError('Calendar', 'deleteEventAsync');\n  }\n  if (!id) {\n    throw new Error('deleteEventAsync must be called with an id (string) of the target event');\n  }\n  const { futureEvents = false, instanceStartDate } = recurringEventOptions;\n  return ExpoCalendar.deleteEventAsync({ id, instanceStartDate }, { futureEvents });\n}\n\n// @needsAudit\n/**\n * Gets all attendees for a given event (or instance of a recurring event).\n * @param id ID of the event to return attendees for.\n * @param recurringEventOptions A map of options for recurring events.\n * @return A promise which fulfils with an array of [`Attendee`](#attendee) associated with the\n * specified event.\n */\nexport async function getAttendeesForEventAsync(\n  id: string,\n  recurringEventOptions: RecurringEventOptions = {}\n): Promise<Attendee[]> {\n  if (!ExpoCalendar.getAttendeesForEventAsync) {\n    throw new UnavailabilityError('Calendar', 'getAttendeesForEventAsync');\n  }\n  if (!id) {\n    throw new Error(\n      'getAttendeesForEventAsync must be called with an id (string) of the target event'\n    );\n  }\n  const { instanceStartDate } = recurringEventOptions;\n  // Android only takes an ID, iOS takes an object\n  const params = Platform.OS === 'ios' ? { id, instanceStartDate } : id;\n  return ExpoCalendar.getAttendeesForEventAsync(params);\n}\n\n// @needsAudit\n/**\n * Creates a new attendee record and adds it to the specified event. Note that if `eventId` specifies\n * a recurring event, this will add the attendee to every instance of the event.\n * @param eventId ID of the event to add this attendee to.\n * @param details A map of details for the attendee to be created.\n * @return A string representing the ID of the newly created attendee record.\n * @platform android\n */\nexport async function createAttendeeAsync(\n  eventId: string,\n  details: Partial<Attendee> = {}\n): Promise<string> {\n  if (!ExpoCalendar.saveAttendeeForEventAsync) {\n    throw new UnavailabilityError('Calendar', 'createAttendeeAsync');\n  }\n  if (!eventId) {\n    throw new Error('createAttendeeAsync must be called with an id (string) of the target event');\n  }\n  if (!details.email) {\n    throw new Error('createAttendeeAsync requires an email (string)');\n  }\n  if (!details.role) {\n    throw new Error('createAttendeeAsync requires a role (string)');\n  }\n  if (!details.type) {\n    throw new Error('createAttendeeAsync requires a type (string)');\n  }\n  if (!details.status) {\n    throw new Error('createAttendeeAsync requires a status (string)');\n  }\n  const newDetails = { ...details, id: undefined };\n  return ExpoCalendar.saveAttendeeForEventAsync(newDetails, eventId);\n}\n\n// @needsAudit\n/**\n * Updates an existing attendee record. To remove a property, explicitly set it to `null` in `details`.\n * @param id ID of the attendee record to be updated.\n * @param details A map of properties to be updated.\n * @platform android\n */\nexport async function updateAttendeeAsync(\n  id: string,\n  details: Partial<Attendee> = {}\n): Promise<string> {\n  if (!ExpoCalendar.saveAttendeeForEventAsync) {\n    throw new UnavailabilityError('Calendar', 'updateAttendeeAsync');\n  }\n  if (!id) {\n    throw new Error('updateAttendeeAsync must be called with an id (string) of the target event');\n  }\n  const newDetails = { ...details, id };\n  return ExpoCalendar.saveAttendeeForEventAsync(newDetails, null);\n}\n\n// @needsAudit\n/**\n * Gets an instance of the default calendar object.\n * @return A promise resolving to the [Calendar](#calendar) object that is the user's default calendar.\n * @platform ios\n */\nexport async function getDefaultCalendarAsync(): Promise<Calendar> {\n  if (!ExpoCalendar.getDefaultCalendarAsync) {\n    throw new UnavailabilityError('Calendar', 'getDefaultCalendarAsync');\n  }\n  return ExpoCalendar.getDefaultCalendarAsync();\n}\n\n// @needsAudit\n/**\n * Deletes an existing attendee record from the device. __Use with caution.__\n * @param id ID of the attendee to delete.\n * @platform android\n */\nexport async function deleteAttendeeAsync(id: string): Promise<void> {\n  if (!ExpoCalendar.deleteAttendeeAsync) {\n    throw new UnavailabilityError('Calendar', 'deleteAttendeeAsync');\n  }\n  if (!id) {\n    throw new Error('deleteAttendeeAsync must be called with an id (string) of the target event');\n  }\n  return ExpoCalendar.deleteAttendeeAsync(id);\n}\n\n// @needsAudit\n/**\n * Returns a list of reminders matching the provided criteria. If `startDate` and `endDate` are defined,\n * returns all reminders that overlap at all with the [startDate, endDate] interval - i.e. all reminders\n * that end after the `startDate` or begin before the `endDate`.\n * @param calendarIds Array of IDs of calendars to search for reminders in.\n * @param status One of `Calendar.ReminderStatus.COMPLETED` or `Calendar.ReminderStatus.INCOMPLETE`.\n * @param startDate Beginning of time period to search for reminders in. Required if `status` is defined.\n * @param endDate End of time period to search for reminders in. Required if `status` is defined.\n * @return A promise which fulfils with an array of [`Reminder`](#reminder) objects matching the search criteria.\n * @platform ios\n */\nexport async function getRemindersAsync(\n  calendarIds: (string | null)[],\n  status: string | null,\n  startDate: Date,\n  endDate: Date\n): Promise<Reminder[]> {\n  if (!ExpoCalendar.getRemindersAsync) {\n    throw new UnavailabilityError('Calendar', 'getRemindersAsync');\n  }\n  if (status && !startDate) {\n    throw new Error(\n      'getRemindersAsync must be called with a startDate (date) to search for reminders'\n    );\n  }\n  if (status && !endDate) {\n    throw new Error(\n      'getRemindersAsync must be called with an endDate (date) to search for reminders'\n    );\n  }\n  if (!calendarIds || !calendarIds.length) {\n    throw new Error(\n      'getRemindersAsync must be called with a non-empty array of calendarIds to search'\n    );\n  }\n  return ExpoCalendar.getRemindersAsync(\n    stringifyIfDate(startDate) || null,\n    stringifyIfDate(endDate) || null,\n    calendarIds,\n    status || null\n  );\n}\n\n// @needsAudit\n/**\n * Returns a specific reminder selected by ID.\n * @param id ID of the reminder to return.\n * @return A promise which fulfils with a [`Reminder`](#reminder) matching the provided ID, if one exists.\n * @platform ios\n */\nexport async function getReminderAsync(id: string): Promise<Reminder> {\n  if (!ExpoCalendar.getReminderByIdAsync) {\n    throw new UnavailabilityError('Calendar', 'getReminderAsync');\n  }\n  if (!id) {\n    throw new Error('getReminderAsync must be called with an id (string) of the target reminder');\n  }\n  return ExpoCalendar.getReminderByIdAsync(id);\n}\n\n// @needsAudit\n/**\n * Creates a new reminder on the specified calendar.\n * @param calendarId ID of the calendar to create this reminder in (or `null` to add the calendar to\n * the OS-specified default calendar for reminders).\n * @param reminder A map of details for the reminder to be created\n * @return A promise which fulfils with a string representing the ID of the newly created reminder.\n * @platform ios\n */\nexport async function createReminderAsync(\n  calendarId: string | null,\n  reminder: Reminder = {}\n): Promise<string> {\n  if (!ExpoCalendar.saveReminderAsync) {\n    throw new UnavailabilityError('Calendar', 'createReminderAsync');\n  }\n\n  const { id, ...details } = reminder;\n  const newDetails = {\n    ...details,\n    calendarId: calendarId === null ? undefined : calendarId,\n  };\n  return ExpoCalendar.saveReminderAsync(stringifyDateValues(newDetails));\n}\n\n// @needsAudit\n/**\n * Updates the provided details of an existing reminder stored on the device. To remove a property,\n * explicitly set it to `null` in `details`.\n * @param id ID of the reminder to be updated.\n * @param details A map of properties to be updated.\n * @platform ios\n */\nexport async function updateReminderAsync(id: string, details: Reminder = {}): Promise<string> {\n  if (!ExpoCalendar.saveReminderAsync) {\n    throw new UnavailabilityError('Calendar', 'updateReminderAsync');\n  }\n  if (!id) {\n    throw new Error(\n      'updateReminderAsync must be called with an id (string) of the target reminder'\n    );\n  }\n\n  if (details.hasOwnProperty('creationDate') || details.hasOwnProperty('lastModifiedDate')) {\n    console.warn(\n      'updateReminderAsync was called with one or more read-only properties, which will not be updated'\n    );\n  }\n\n  const newDetails = { ...details, id };\n  return ExpoCalendar.saveReminderAsync(stringifyDateValues(newDetails));\n}\n\n// @needsAudit\n/**\n * Deletes an existing reminder from the device. __Use with caution.__\n * @param id ID of the reminder to be deleted.\n * @platform ios\n */\nexport async function deleteReminderAsync(id: string): Promise<void> {\n  if (!ExpoCalendar.deleteReminderAsync) {\n    throw new UnavailabilityError('Calendar', 'deleteReminderAsync');\n  }\n  if (!id) {\n    throw new Error(\n      'deleteReminderAsync must be called with an id (string) of the target reminder'\n    );\n  }\n  return ExpoCalendar.deleteReminderAsync(id);\n}\n\n// @needsAudit @docsMissing\n/**\n * @return A promise which fulfils with an array of [`Source`](#source) objects all sources for\n * calendars stored on the device.\n * @platform ios\n */\nexport async function getSourcesAsync(): Promise<Source[]> {\n  if (!ExpoCalendar.getSourcesAsync) {\n    throw new UnavailabilityError('Calendar', 'getSourcesAsync');\n  }\n  return ExpoCalendar.getSourcesAsync();\n}\n\n// @needsAudit\n/**\n * Returns a specific source selected by ID.\n * @param id ID of the source to return.\n * @return A promise which fulfils with an array of [`Source`](#source) object matching the provided\n * ID, if one exists.\n * @platform ios\n */\nexport async function getSourceAsync(id: string): Promise<Source> {\n  if (!ExpoCalendar.getSourceByIdAsync) {\n    throw new UnavailabilityError('Calendar', 'getSourceAsync');\n  }\n  if (!id) {\n    throw new Error('getSourceAsync must be called with an id (string) of the target source');\n  }\n  return ExpoCalendar.getSourceByIdAsync(id);\n}\n\n// @needsAudit\n/**\n * Sends an intent to open the specified event in the OS Calendar app.\n * @param id ID of the event to open.\n * @platform android\n */\nexport function openEventInCalendar(id: string): void {\n  if (!ExpoCalendar.openEventInCalendar) {\n    console.warn(`openEventInCalendar is not available on platform: ${Platform.OS}`);\n    return;\n  }\n  if (!id) {\n    throw new Error('openEventInCalendar must be called with an id (string) of the target event');\n  }\n  return ExpoCalendar.openEventInCalendar(parseInt(id, 10));\n} // Android\n\n// @needsAudit\n/**\n * @deprecated Use [`requestCalendarPermissionsAsync()`](#calendarrequestcalendarpermissionsasync) instead.\n */\nexport async function requestPermissionsAsync(): Promise<PermissionResponse> {\n  console.warn(\n    'requestPermissionsAsync is deprecated. Use requestCalendarPermissionsAsync instead.'\n  );\n  return requestCalendarPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Checks user's permissions for accessing user's calendars.\n * @return A promise that resolves to an object of type [`PermissionResponse`](#permissionresponse).\n */\nexport async function getCalendarPermissionsAsync(): Promise<PermissionResponse> {\n  if (!ExpoCalendar.getCalendarPermissionsAsync) {\n    throw new UnavailabilityError('Calendar', 'getCalendarPermissionsAsync');\n  }\n  return ExpoCalendar.getCalendarPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Checks user's permissions for accessing user's reminders.\n * @return A promise that resolves to an object of type [`PermissionResponse`](#permissionresponse).\n * @platform ios\n */\nexport async function getRemindersPermissionsAsync(): Promise<PermissionResponse> {\n  if (!ExpoCalendar.getRemindersPermissionsAsync) {\n    throw new UnavailabilityError('Calendar', 'getRemindersPermissionsAsync');\n  }\n  return ExpoCalendar.getRemindersPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Asks the user to grant permissions for accessing user's calendars.\n * @return A promise that resolves to an object of type [`PermissionResponse`](#permissionresponse).\n */\nexport async function requestCalendarPermissionsAsync(): Promise<PermissionResponse> {\n  if (!ExpoCalendar.requestCalendarPermissionsAsync) {\n    throw new UnavailabilityError('Calendar', 'requestCalendarPermissionsAsync');\n  }\n  return await ExpoCalendar.requestCalendarPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Asks the user to grant permissions for accessing user's reminders.\n * @return A promise that resolves to an object of type [`PermissionResponse`](#permissionresponse).\n * @platform ios\n */\nexport async function requestRemindersPermissionsAsync(): Promise<PermissionResponse> {\n  if (!ExpoCalendar.requestRemindersPermissionsAsync) {\n    throw new UnavailabilityError('Calendar', 'requestRemindersPermissionsAsync');\n  }\n  return await ExpoCalendar.requestRemindersPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Check or request permissions to access the calendar.\n * This uses both `getCalendarPermissionsAsync` and `requestCalendarPermissionsAsync` to interact\n * with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = Calendar.useCalendarPermissions();\n * ```\n */\nexport const useCalendarPermissions = createPermissionHook({\n  getMethod: getCalendarPermissionsAsync,\n  requestMethod: requestCalendarPermissionsAsync,\n});\n\n// @needsAudit\n/**\n * Check or request permissions to access reminders.\n * This uses both `getRemindersPermissionsAsync` and `requestRemindersPermissionsAsync` to interact\n * with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = Calendar.useRemindersPermissions();\n * ```\n */\nexport const useRemindersPermissions = createPermissionHook({\n  getMethod: getRemindersPermissionsAsync,\n  requestMethod: requestRemindersPermissionsAsync,\n});\n\nexport const EntityTypes = {\n  EVENT: 'event',\n  REMINDER: 'reminder',\n};\n\nexport const Frequency = {\n  DAILY: 'daily',\n  WEEKLY: 'weekly',\n  MONTHLY: 'monthly',\n  YEARLY: 'yearly',\n};\n\nexport const Availability = {\n  NOT_SUPPORTED: 'notSupported', // iOS\n  BUSY: 'busy',\n  FREE: 'free',\n  TENTATIVE: 'tentative',\n  UNAVAILABLE: 'unavailable', // iOS\n};\n\nexport const CalendarType = {\n  LOCAL: 'local',\n  CALDAV: 'caldav',\n  EXCHANGE: 'exchange',\n  SUBSCRIBED: 'subscribed',\n  BIRTHDAYS: 'birthdays',\n  UNKNOWN: 'unknown',\n}; // iOS\n\nexport const EventStatus = {\n  NONE: 'none',\n  CONFIRMED: 'confirmed',\n  TENTATIVE: 'tentative',\n  CANCELED: 'canceled',\n};\n\nexport const SourceType = {\n  LOCAL: 'local',\n  EXCHANGE: 'exchange',\n  CALDAV: 'caldav',\n  MOBILEME: 'mobileme',\n  SUBSCRIBED: 'subscribed',\n  BIRTHDAYS: 'birthdays',\n};\n\nexport const AttendeeRole = {\n  UNKNOWN: 'unknown', // iOS\n  REQUIRED: 'required', // iOS\n  OPTIONAL: 'optional', // iOS\n  CHAIR: 'chair', // iOS\n  NON_PARTICIPANT: 'nonParticipant', // iOS\n  ATTENDEE: 'attendee', // Android\n  ORGANIZER: 'organizer', // Android\n  PERFORMER: 'performer', // Android\n  SPEAKER: 'speaker', // Android\n  NONE: 'none', // Android\n};\n\nexport const AttendeeStatus = {\n  UNKNOWN: 'unknown', // iOS\n  PENDING: 'pending', // iOS\n  ACCEPTED: 'accepted',\n  DECLINED: 'declined',\n  TENTATIVE: 'tentative',\n  DELEGATED: 'delegated', // iOS\n  COMPLETED: 'completed', // iOS\n  IN_PROCESS: 'inProcess', // iOS\n  INVITED: 'invited', // Android\n  NONE: 'none', // Android\n};\n\nexport const AttendeeType = {\n  UNKNOWN: 'unknown', // iOS\n  PERSON: 'person', // iOS\n  ROOM: 'room', // iOS\n  GROUP: 'group', // iOS\n  RESOURCE: 'resource',\n  OPTIONAL: 'optional', // Android\n  REQUIRED: 'required', // Android\n  NONE: 'none', // Android\n};\n\nexport const AlarmMethod = {\n  ALARM: 'alarm',\n  ALERT: 'alert',\n  EMAIL: 'email',\n  SMS: 'sms',\n  DEFAULT: 'default',\n};\n\nexport const EventAccessLevel = {\n  CONFIDENTIAL: 'confidential',\n  PRIVATE: 'private',\n  PUBLIC: 'public',\n  DEFAULT: 'default',\n};\n\nexport const CalendarAccessLevel = {\n  CONTRIBUTOR: 'contributor',\n  EDITOR: 'editor',\n  FREEBUSY: 'freebusy',\n  OVERRIDE: 'override',\n  OWNER: 'owner',\n  READ: 'read',\n  RESPOND: 'respond',\n  ROOT: 'root',\n  NONE: 'none',\n};\n\nexport const ReminderStatus = {\n  COMPLETED: 'completed',\n  INCOMPLETE: 'incomplete',\n};\n\nfunction stringifyIfDate(date: any): any {\n  return date instanceof Date ? date.toISOString() : date;\n}\n\nfunction stringifyDateValues(obj: object): object {\n  return Object.keys(obj).reduce((acc, key) => {\n    const value = obj[key];\n    if (value != null && typeof value === 'object' && !(value instanceof Date)) {\n      if (Array.isArray(value)) {\n        return { ...acc, [key]: value.map(stringifyDateValues) };\n      }\n      return { ...acc, [key]: stringifyDateValues(value) };\n    }\n    acc[key] = stringifyIfDate(value);\n    return acc;\n  }, {});\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}